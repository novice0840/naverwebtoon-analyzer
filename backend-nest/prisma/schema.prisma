generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Webtoon {
  id        String    @id   @default(uuid())
  title     String
  writer    String
  illustrator String
  genre String
  platform  Platform  @relation(fields: [platformId], references: [id])
  platformId String
  synopsis String?
  thumbnailURL String?
  reivews Review[]
  posts Post[]
  chats Chat[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Platform {
  id        String    @id   @default(uuid())
  name      String
  webtoons  Webtoon[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Review {
  id         String    @id   @default(uuid())
  content   String
  rating    Int
  webtoon   Webtoon  @relation(fields: [webtoonId], references: [id])
  webtoonId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Post {
  id        String      @default(uuid()) @id
  content   String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  webtoon   Webtoon  @relation(fields: [webtoonId], references: [id])
  webtoonId String
  comments Comment[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Comment {
  id        String      @default(uuid()) @id
  content   String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  post      Post        @relation(fields: [postId], references: [id])
  postId    String
  parent    Comment?    @relation("CommentToReply", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[]   @relation("CommentToReply")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Chat {
  id        String      @default(uuid()) @id
  content   String
  webtoon   Webtoon      @relation(fields: [webtoonId], references: [id])
  webtoonId String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
model User {
  id         String    @id   @default(uuid())
  email String  @unique
  name  String?
  posts Post[]
  comments Comment[]
  chats Chat[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

